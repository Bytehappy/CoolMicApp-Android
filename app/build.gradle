import org.apache.tools.ant.taskdefs.condition.Os

apply plugin: 'android-sdk-manager'
apply plugin: 'com.android.application'

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.3"

    defaultConfig {
        applicationId "cc.echonet.coolmicapp"
        minSdkVersion 16
        targetSdkVersion 23
        sourceSets.main {
            jniLibs.srcDir 'src/main/libs'
            // use the jni .so compiled from the manual ndk-build command
            jni.srcDirs = [] //disable automatic ndk-build call
        }
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        buildConfigField "String", "GIT_REVISION", "\"${gitRevision()}\""
        buildConfigField "String", "GIT_BRANCH", "\"${gitBranch()}\""
        buildConfigField "String", "GIT_AUTHOR", "\"${gitAuthor()}\""
        buildConfigField "String", "GIT_DIRTY", "\"${gitDirty()}\""
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
    }

    useLibrary 'org.apache.http.legacy'
}

task ndkBuild(type: Exec) {
    //def ndkDir = android.ndkDirectory.getAbsolutePath()
    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    def ndkDir = properties.getProperty('ndk.dir')
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        commandLine ndkDir + '\\ndk-build.cmd', '-C', file('src/main').absolutePath
    } else {
        commandLine ndkDir + '/ndk-build', '-C', file('src/main').absolutePath
    }
}

task ndkClean(type: Exec) {
    //def ndkDir = android.ndkDirectory.getAbsolutePath()
    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    def ndkDir = properties.getProperty('ndk.dir')
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        commandLine ndkDir + '\\ndk-build.cmd', '-C', file('src/main').absolutePath, 'clean'
    } else {
        commandLine ndkDir + '/ndk-build', '-C', file('src/main').absolutePath, 'clean'
    }
}

clean.dependsOn 'ndkClean'

tasks.withType(JavaCompile) {
    compileTask -> compileTask.dependsOn ndkBuild
}

def gitRevision() {
    try {
        return "git rev-parse HEAD".execute().text.trim()
    }
    catch(Exception ex)
    {
        return "N/A"
    }
}

def gitBranch() {
    try {
        return "git rev-parse --symbolic-full-name HEAD".execute().text.trim()
    }
    catch(Exception ex)
    {
        return "N/A"
    }
}

def gitAuthor() {
    try {
        return "git --no-pager show -s --format=\"%aN <%aE>\" HEAD".execute().text.trim()
    }
    catch(Exception ex)
    {
        return "N/A"
    }
}

def gitDirty() {
    try {
        if ("git status --porcelain".execute().text.trim().isEmpty()) {
            return "false"
        } else {
            return "true"
        }
    }
    catch(Exception ex)
    {
        return "N/A"
    }
}

dependencies {
    compile 'com.android.support:support-v4:23.+'
    compile 'com.google.zxing:android-integration:3.2.1'
    androidTestCompile 'com.android.support:support-annotations:23.+'
    androidTestCompile 'com.android.support.test:runner:0.4.1'
    androidTestCompile 'com.android.support.test:rules:0.4.1'
    // Optional -- Hamcrest library
    androidTestCompile 'org.hamcrest:hamcrest-library:1.3'
    // Optional -- UI testing with Espresso
    androidTestCompile 'com.android.support.test.espresso:espresso-core:2.2.1'

}
